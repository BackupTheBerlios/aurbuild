TODO

General List:
 * Use json interface to grab info on packages when syncing/building
   there was some old code that was supposed to fix problems with finding
   some packages that I clobbered. Example: try installing 'rar' from AUR

 * Add a switch to change AUR url. (Partially Done)
	example: aurbuild --url http://aur.test-site.org
	Need to add function to verify that the url is valid and to add a
	trailing slash/ or leading protocol://

 * Create a testing AUR specifically for aurbuild testing. With packages for
   that purpose.

 * Improve search
	- Support for multiple keywords
	- Narrowing down results by location, category, maintainer
	- Narrowing results by votes
	- Add functionality to allow user to browse through search pages
	  just like in AUR (to review more than 100 results)

 * Add support for an aurbuild config file

 * When searching for official PKGBUILDs be able to identify duplicate packages
   and select the specific repo desired (eg. core|testing, extra|unstable or
   any other repo that might have the same pkg as others)

 * Find what's causing a delay when building official packages 
	- aurbuild.find.find_dir() is causing a delay because of some ugly
	  recursion
	- Alright I replaced the recursion with a `find` subprocess. It's
	  a bit better but there is still more delay than I'd like.
	- Using pacman -Si to find the repo THEN doing the search in
	  /var/abs/repo is about five times faster than just searching
	  /var/abs (Just from shell experimentation)
	- find -maxdepth might help as well

 * Make builddeps/syncdeps more sophisticated
	I'd like to be able to select whether to sync or build the deps
	individually. The logic for selecting to build then reviewing pkgbuild
	can be applied to building deps from [unsupported] as well.

 * Add support to build deps from [unsupported] more easily (Without having to
   run aurbuild multiple times)

 * Dynamically determine abs root from /etc/abs/abs.conf or shell variable
   $ABSROOT

 * Support to vote, unvote, flag, unflag, upload, write comments

 * Add a switch to view user comments.

 * Add a switch to take pacman arguments.

 * Use the libalpm hooks in pacman3 for python. Only because it would be faster
   and easier to maintain than my manual flat file parsing module (pacman.py).

 * Respect pacman.conf:RootDir

 * Cache installed pkgs in pacman.conf:CacheDir or /var/cache/pacman/pkg

 * Work out how source files should be cached
	I'm thinking just the tarball with scripts/local sources should be
	cached (instead of individual files), along with downloaded sources.
	It might be a good idea to propose a patch to makepkg as well.

	Cache cvs/svn/git sources as well.
	
	Correspond with dev of yaourt and makepkg to get some kind
	of standard location for caching sources

 * Look at raw_pkg_query to possibly improve search performance

 * Make sure root user is used for as few operations as possible
   Currently some directories in /var/tmp/aurbuild are owned by root

 * Make sure user_makedirs and user_copytree switch user effectively
   (Get rid of global variables)

 * filter_deps() and main() in scripts/aurbuild need serious rework

 * Utilise AUR's JSON interface for search info (simplejson)

 * Change menu appearance
	- Add more info like package repo, version, category

 * Change output when resolving dependencies
	- Use just tabs or spaces instead of a bunch of funky characters

cleanup() cleanup:
 * Move cleanup() to utils. Should be able to take a variable number of
   arguments. cleanup() is used in a lot of functions in the main
   script and in utils. It probably is being called more than it is needed.
   It also uses global variables which should be gotten rid of if possible.
   Maybe it can be put into a class.

 * Instead of calling cleanup() and sys.exit() in most functions raise an
   exception and let calling script deal with cleanup. Also fix functions that
   return an extra 'err' variable to raise an exception instead.

Long term:
 * Make sure only a few select functions call sys.exit() and cleanup()
 	eg. Main script, main(), init()

In Progress:
 * Move functions out of main script and into appropriate modules

