TODO
Note: Some of these are just ideas and might not get implemented at all.

General List:
 * Anything marked with 'TODO' in the source

 * Add support to build deps recursively from [unsupported] more easily
   (Without having to run aurbuild multiple times)

 * Add a switch to change AUR url. (Partially Done)
	example: aurbuild --url http://aur.test-site.org
	Need to add function to verify that the url is valid and to add a
	trailing slash/ or leading protocol://

 * If a dependency isn't found in the database, don't quit immediately.
   Check the rest of the dependencies, THEN exit. (Partially Done)

 * When syncing don't go through the whole tree if the package is installed.

 * I think I made an oops in removing --revision. Add it back maybe.

 * Create a testing AUR specifically for aurbuild testing. With packages for
   that purpose.

 * Improve search
	- Sorting packages by repo and alphabetically.
	- Narrowing down and sorting results by location, maintainer
	- Narrowing, sorting results by votes
	- Add functionality to allow user to browse through search pages
	  just like in AUR (to review more than 100 results)

 * Add support for an aurbuild config file

 * When searching for official PKGBUILDs be able to identify duplicate packages
   and select the specific repo desired (eg. core|testing, extra|unstable or
   any other repo that might have the same pkg as others)

 * Find what's causing a delay when building official packages 
	- aurbuild.find.find_dir() is causing a delay because of some
	  nasty recursion
	- Using pacman -Si to find the repo THEN doing the search in
	  /var/abs/repo is about five times faster than just searching
	  /var/abs (Just from shell experimentation)
	- find -maxdepth might help as well (decreases search time by about
          21 times)
	- find <repo_dir> -maxdepth 3 -name <pkgname>
	  (.200s) is slower than:
	  find <abs_root> -maxdepth 3 -name <pkgname>
	  (.065s) which is slower than:
	  find <repo_dir> -maxdepth 2 -name <pkgname>
	  (.045s)

	  Also,
	  find -maxdepth 3 -name <pkgname> -type d
	  is slower than when omitting type.

	- I had replaced the finding algorithm with a find subprocess.
	  It made for nice short code and works well, but I don't think
	  spawning another process is a good approach. I will restore it
	  to pure Python.

 * Make builddeps/syncdeps more sophisticated
	I'd like to be able to select whether to sync or build the deps
	individually. The logic for selecting to build then reviewing pkgbuild
	can be applied to building deps from [unsupported] as well.

 * Get all system configuration from the proper places.
	- /etc/abs.conf ($ABSROOT)
	- /etc/pacman.conf (RootDir,DBPath,CacheDir)
	- /etc/makepkg.conf (BUILDSCRIPT, PKGEXT, SRCEXT, ...)
	- $HOME/.makepkg.conf (ditto)

 * Support to vote, unvote, flag, unflag, upload, write comments

 * Add a switch to view user comments.

 * Add a switch to take pacman arguments.

 * Use the libalpm hooks in pacman3 for python. Only because it would be
   faster (and easier to maintain?) than the manual flat file parsing module
   pacman.py.

 * Work out how source files should be cached
	I'm thinking just the tarball with scripts/local sources should be
	cached (makepkg --source, instead of individual files), along with
	downloaded sources. It might be a good idea to propose a patch to
	makepkg as well.

	Cache cvs/svn/git sources as well.
	
	Correspond with dev of yaourt and makepkg to get some kind
	of standard location for caching sources

 * Look at raw_pkg_query to possibly improve search performance

 * Make sure root user is used for as few operations as possible
   Currently some directories in /var/tmp/aurbuild are owned by root

 * Make sure user_makedirs and user_copytree switch user effectively
   (Get rid of global variables)

 * filter_deps() and main() in scripts/aurbuild need serious rework

 * Utilise AUR's JSON interface for search info (simplejson)

 * Change menu appearance
	- Add more info like package repo, version

 * echo_bash_vars() suffers from a potential problem if we wanted to echo
   an array along with other variables, or maybe even two arrays.
   It splits the bash array output into a python array in a not-so-smart way
   which may yield undesirable results.

cleanup() cleanup:
 * Move cleanup() to utils. Should be able to take a variable number of
   arguments. cleanup() is used in a lot of functions in the main
   script and in utils. It probably is being called more than it is needed.
   It also uses global variables which should be gotten rid of if possible.
   Maybe it can be put into a class.

 * Instead of calling cleanup() and sys.exit() in most functions raise an
   exception and let calling script deal with cleanup. Also fix functions that
   return an extra 'err' variable to raise an exception instead.

Long term:
 * Make sure only a few select functions call sys.exit() and cleanup()
 	eg. Main script, main(), init()

 * Get rid of ABS dependency to fetch official build files

 * Create a alpm database for packages explicitly installed via aurbuild.
   It could be something like /var/cache/aurbuild/aur.archlinux.org
   DBs should be on a per-URL basis.

In Progress:
 * Move functions out of main script and into appropriate modules

